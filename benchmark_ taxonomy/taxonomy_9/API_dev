import time, os, psutil
from memory_profiler import memory_usage
from flask import Flask, jsonify
import threading, requests

def run_flask():
    app = Flask(__name__)

    @app.route("/predict")
    def predict():
        return jsonify({"message": "Hello from API"})

    app.run(port=5001)

def benchmark_api():
    total_lines, core_lines = 24, 8
    process = psutil.Process(os.getpid())
    cpu_start, wall_start = process.cpu_times().user, time.time()

    # Start API in background
    thread = threading.Thread(target=run_flask, daemon=True)
    thread.start()
    time.sleep(2)  # wait for server

    # Test API call
    r = requests.get("http://127.0.0.1:5001/predict")
    response_status = r.status_code

    wall_end, cpu_end = time.time(), process.cpu_times().user
    runtime, cpu_runtime = round(wall_end - wall_start, 3), round(cpu_end - cpu_start, 3)
    return runtime, cpu_runtime, response_status, total_lines, core_lines

if __name__ == "__main__":
    mem_usage = memory_usage((benchmark_api,), max_iterations=1)
    runtime, cpu_runtime, status, total_lines, core_lines = benchmark_api()
    print(f"Runtime: {runtime}s | CPU Runtime: {cpu_runtime}s | Status: {status}")
    print(f"Memory Usage: {round(max(mem_usage)-min(mem_usage),3)} MB")
    print(f"Total LOC: {total_lines} | Core LOC: {core_lines}")
